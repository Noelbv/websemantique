{"ast":null,"code":"//fichier utilitaire pour les services\n// création des requests options\n// fonctions get/save/create/delete\n\n// EXEMPLE OPTIONS REQUETE API (headers)\n// const getRequestOptionsGoogleAPI = (method = \"GET\") => ({\n//   method,\n//   headers: {\n//     \"Content-Type\": \"application/json\",\n//     \"X-Requested-With\": \"fetch\",\n//   },\n// });\n\nclass ApiService {}\nApiService.getDataAutocompletion = async () => {};\nconst express = require('express');\nconst app = express();\n\n//Import PythonShell module.\nconst {\n  PythonShell\n} = require('python-shell');\n\n//Router to handle the incoming request.\napp.get(\"/\", (req, res, next) => {\n  //Here are the option object in which arguments can be passed for the python_test.js.\n  let options = {\n    mode: 'text',\n    pythonOptions: ['-u'],\n    // get print results in real-time\n    scriptPath: './src/Python',\n    //If you are having python_test.py script in same folder, then it's optional.\n    args: ['0', 'Vin'] //An argument which can be accessed in the script using sys.argv[1]\n  };\n\n  PythonShell.run('main.py', options, function (err, result) {\n    if (err) throw err;\n    // result is an array consisting of messages collected\n    //during execution of script.\n    console.log('result: ', JSON.parse(result));\n    res.send(JSON.parse(result));\n  });\n});\n\n//Creates the server on default port 8000 and can be accessed through localhost:8000\nconst port = 8000;\napp.listen(port, () => console.log(`Server connected to ${port}`));","map":{"version":3,"names":["ApiService","getDataAutocompletion","express","require","app","PythonShell","get","req","res","next","options","mode","pythonOptions","scriptPath","args","run","err","result","console","log","JSON","parse","send","port","listen"],"sources":["/Users/gommugommu/Documents/INSAdeLyon/4A/Web_Sémantique/websemantique/src/AppService.js"],"sourcesContent":["//fichier utilitaire pour les services\n// création des requests options\n// fonctions get/save/create/delete\n\n// EXEMPLE OPTIONS REQUETE API (headers)\n// const getRequestOptionsGoogleAPI = (method = \"GET\") => ({\n//   method,\n//   headers: {\n//     \"Content-Type\": \"application/json\",\n//     \"X-Requested-With\": \"fetch\",\n//   },\n// });\n\n\n\nclass ApiService {\n\n  static getDataAutocompletion = async () => {\n    \n  }\n}\n\nconst express=require('express');\nconst app=express();\n \n//Import PythonShell module.\nconst {PythonShell} =require('python-shell');\n \n//Router to handle the incoming request.\napp.get(\"/\", (req, res, next)=>{\n    //Here are the option object in which arguments can be passed for the python_test.js.\n    let options = {\n        mode: 'text',\n        pythonOptions: ['-u'], // get print results in real-time\n          scriptPath: './src/Python', //If you are having python_test.py script in same folder, then it's optional.\n        args: ['0', 'Vin'] //An argument which can be accessed in the script using sys.argv[1]\n    };\n     \n \n    PythonShell.run('main.py', options, function (err, result){\n          if (err) throw err;\n          // result is an array consisting of messages collected\n          //during execution of script.\n          console.log('result: ', JSON.parse(result));\n          res.send(JSON.parse(result))\n    });\n});\n \n//Creates the server on default port 8000 and can be accessed through localhost:8000\nconst port=8000;\napp.listen(port, ()=>console.log(`Server connected to ${port}`));"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA,MAAMA,UAAU,CAAC;AAAXA,UAAU,CAEPC,qBAAqB,GAAG,YAAY,CAE3C,CAAC;AAGH,MAAMC,OAAO,GAACC,OAAO,CAAC,SAAS,CAAC;AAChC,MAAMC,GAAG,GAACF,OAAO,EAAE;;AAEnB;AACA,MAAM;EAACG;AAAW,CAAC,GAAEF,OAAO,CAAC,cAAc,CAAC;;AAE5C;AACAC,GAAG,CAACE,GAAG,CAAC,GAAG,EAAE,CAACC,GAAG,EAAEC,GAAG,EAAEC,IAAI,KAAG;EAC3B;EACA,IAAIC,OAAO,GAAG;IACVC,IAAI,EAAE,MAAM;IACZC,aAAa,EAAE,CAAC,IAAI,CAAC;IAAE;IACrBC,UAAU,EAAE,cAAc;IAAE;IAC9BC,IAAI,EAAE,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;EACvB,CAAC;;EAGDT,WAAW,CAACU,GAAG,CAAC,SAAS,EAAEL,OAAO,EAAE,UAAUM,GAAG,EAAEC,MAAM,EAAC;IACpD,IAAID,GAAG,EAAE,MAAMA,GAAG;IAClB;IACA;IACAE,OAAO,CAACC,GAAG,CAAC,UAAU,EAAEC,IAAI,CAACC,KAAK,CAACJ,MAAM,CAAC,CAAC;IAC3CT,GAAG,CAACc,IAAI,CAACF,IAAI,CAACC,KAAK,CAACJ,MAAM,CAAC,CAAC;EAClC,CAAC,CAAC;AACN,CAAC,CAAC;;AAEF;AACA,MAAMM,IAAI,GAAC,IAAI;AACfnB,GAAG,CAACoB,MAAM,CAACD,IAAI,EAAE,MAAIL,OAAO,CAACC,GAAG,CAAE,uBAAsBI,IAAK,EAAC,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}