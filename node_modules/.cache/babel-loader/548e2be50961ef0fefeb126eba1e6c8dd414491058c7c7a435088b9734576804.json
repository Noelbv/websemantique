{"ast":null,"code":"//fichier utilitaire pour les services\n// création des requests options\n// fonctions get/save/create/delete\nimport { PythonShell } from \"python-shell\";\n// EXEMPLE OPTIONS REQUETE API (headers)\nconst getOptionsRechercheFilm = stringSearch => ({\n  mode: 'text',\n  pythonOptions: ['-u'],\n  // get print results in real-time\n  scriptPath: './src/Python',\n  //If you are having python_test.py script in same folder, then it's optional.\n  args: ['0', stringSearch] //An argument which can be accessed in the script using sys.argv[1]\n});\n\nclass ApiService {}\nApiService.getSearchedFilm = async stringSearch => {\n  PythonShell.run('main.py', getOptionsRechercheFilm(stringSearch), function (err, result) {\n    if (err) throw err;\n    // result is an array consisting of messages collected\n    //during execution of script.\n    console.log('result: ', JSON.parse(result));\n    return JSON.parse(result);\n  });\n};\nexport default ApiService;\n\n// //Router to handle the incoming request.\n// app.get(\"/\", (req, res, next)=>{\n//     //Here are the option object in which arguments can be passed for the python_test.js.\n//     let options = {\n//         mode: 'text',\n//         pythonOptions: ['-u'], // get print results in real-time\n//           scriptPath: './src/Python', //If you are having python_test.py script in same folder, then it's optional.\n//         args: ['0', 'Vin'] //An argument which can be accessed in the script using sys.argv[1]\n//     };\n\n// PythonShell.run('main.py', options, function (err, result){\n//       if (err) throw err;\n//       // result is an array consisting of messages collected\n//       //during execution of script.\n//       console.log('result: ', JSON.parse(result));\n//       res.send(JSON.parse(result))\n// });\n\n//Creates the server on default port 8000 and can be accessed through localhost:8000\n// const port=8000;\n// app.listen(port, ()=>console.log(`Server connected to ${port}`));","map":{"version":3,"names":["PythonShell","getOptionsRechercheFilm","stringSearch","mode","pythonOptions","scriptPath","args","ApiService","getSearchedFilm","run","err","result","console","log","JSON","parse"],"sources":["/Users/gommugommu/Documents/INSAdeLyon/4A/Web_Sémantique/websemantique/src/AppService.js"],"sourcesContent":["//fichier utilitaire pour les services\n// création des requests options\n// fonctions get/save/create/delete\nimport { PythonShell } from \"python-shell\";\n// EXEMPLE OPTIONS REQUETE API (headers)\nconst getOptionsRechercheFilm = (stringSearch) => ({\n    mode: 'text',\n    pythonOptions: ['-u'], // get print results in real-time\n    scriptPath: './src/Python', //If you are having python_test.py script in same folder, then it's optional.\n    args: ['0', stringSearch] //An argument which can be accessed in the script using sys.argv[1]\n});\n\nclass ApiService {\n\n  static getSearchedFilm = async (stringSearch) => {\n    PythonShell.run('main.py', getOptionsRechercheFilm(stringSearch), function (err, result){\n      if (err) throw err;\n      // result is an array consisting of messages collected\n      //during execution of script.\n      console.log('result: ', JSON.parse(result));\n      return JSON.parse(result);\n    });\n  }\n}\n\nexport default ApiService;\n \n// //Router to handle the incoming request.\n// app.get(\"/\", (req, res, next)=>{\n//     //Here are the option object in which arguments can be passed for the python_test.js.\n//     let options = {\n//         mode: 'text',\n//         pythonOptions: ['-u'], // get print results in real-time\n//           scriptPath: './src/Python', //If you are having python_test.py script in same folder, then it's optional.\n//         args: ['0', 'Vin'] //An argument which can be accessed in the script using sys.argv[1]\n//     };\n     \n \n    // PythonShell.run('main.py', options, function (err, result){\n    //       if (err) throw err;\n    //       // result is an array consisting of messages collected\n    //       //during execution of script.\n    //       console.log('result: ', JSON.parse(result));\n    //       res.send(JSON.parse(result))\n    // });\n\n \n//Creates the server on default port 8000 and can be accessed through localhost:8000\n// const port=8000;\n// app.listen(port, ()=>console.log(`Server connected to ${port}`));\n\n\n"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,WAAW,QAAQ,cAAc;AAC1C;AACA,MAAMC,uBAAuB,GAAIC,YAAY,KAAM;EAC/CC,IAAI,EAAE,MAAM;EACZC,aAAa,EAAE,CAAC,IAAI,CAAC;EAAE;EACvBC,UAAU,EAAE,cAAc;EAAE;EAC5BC,IAAI,EAAE,CAAC,GAAG,EAAEJ,YAAY,CAAC,CAAC;AAC9B,CAAC,CAAC;;AAEF,MAAMK,UAAU,CAAC;AAAXA,UAAU,CAEPC,eAAe,GAAG,MAAON,YAAY,IAAK;EAC/CF,WAAW,CAACS,GAAG,CAAC,SAAS,EAAER,uBAAuB,CAACC,YAAY,CAAC,EAAE,UAAUQ,GAAG,EAAEC,MAAM,EAAC;IACtF,IAAID,GAAG,EAAE,MAAMA,GAAG;IAClB;IACA;IACAE,OAAO,CAACC,GAAG,CAAC,UAAU,EAAEC,IAAI,CAACC,KAAK,CAACJ,MAAM,CAAC,CAAC;IAC3C,OAAOG,IAAI,CAACC,KAAK,CAACJ,MAAM,CAAC;EAC3B,CAAC,CAAC;AACJ,CAAC;AAGH,eAAeJ,UAAU;;AAEzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGI;AACA;AACA;AACA;AACA;AACA;AACA;;AAGJ;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}